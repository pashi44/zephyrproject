name: Zephyr CI Build and Flash

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      ZEPHYR_TOOLCHAIN_VARIANT: zephyr
      ZEPHYR_SDK_INSTALL_DIR: /opt/zephyr-sdk

    steps:
      - name: Checkout Your App
        uses: actions/checkout@v4

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ hashFiles('zephyr/scripts/requirements.txt') }}
          restore-keys: |
            pip-

      - name: Cache West & Zephyr Modules
        uses: actions/cache@v4
        with:
          path: |
            .west
            modules
            zephyr
            tools
          key: west-modules-${{ hashFiles('west.yml') }}
          restore-keys: |
            west-modules-

      - name: Install System Dependencies
        run: |
          sudo apt update
          sudo apt install -y cmake ninja-build gperf ccache dfu-util \
            device-tree-compiler wget python3-pip python3-setuptools python3-wheel \
            python3-dev python3-ply python3-colorama python3-click \
            python3-yaml python3-pyelftools build-essential

      - name: Setup West Workspace
        run: |
          pip3 install west
          if [ ! -d .west ]; then
            echo "üõ†Ô∏è Initializing west workspace"
            west init -l .
          else
            echo "‚úÖ West workspace restored from cache"
          fi
          west update
          west zephyr-export
          pip3 install -r zephyr/scripts/requirements.txt

      - name: Install Zephyr SDK
        run: |
          wget https://github.com/zephyrproject-rtos/sdk-ng/releases/download/v0.16.4/zephyr-sdk-0.16.4_linux-x86_64.tar.xz
          tar -xf zephyr-sdk-0.16.4_linux-x86_64.tar.xz
          sudo mv zephyr-sdk-0.16.4 /opt/zephyr-sdk
          sudo /opt/zephyr-sdk/setup.sh -t all -c

      - name: Extract BOARD and Build
        run: |
          BOARD=$(grep -E '^set\s*\(\s*BOARD\s+[^\s)]+\s*\)' CMakeLists.txt | sed -E 's/^set\s*\(\s*BOARD\s+([^\s)]+)\s*\).*/\1/')
          echo "üì¶ Using detected board: $BOARD"
          export DTC_OVERLAY_FILE=${{ github.workspace }}/boards/espressif/esp32_common.overlay
          west build  --pristine

      - name: Upload Firmware
        uses: actions/upload-artifact@v4
        with:
          name: zephyr-firmware
          path: build
          retention-days: 2
          compression-level: 0
          overwrite: true

  flash:
    name: üöÄ Flash Firmware
    needs: build
    runs-on: [self-hosted]


    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: üíæ Restore Zephyr Modules Cache
        uses: actions/cache@v4
        with:
          path: |
            .west
            modules
            zephyr
            tools
          key: west-modules-${{ hashFiles('west.yml') }}
          restore-keys: |
            west-modules-

      - name: Download Firmware Artifact
        uses: actions/download-artifact@v4
        with:
          name: zephyr-firmware
          path: build

      - name: Rebuild Flash Context (pristine)
        run: |
          BOARD=$(grep -E '^set\s*\(\s*BOARD\s+[^\s)]+\s*\)' CMakeLists.txt | sed -E 's/^set\s*\(\s*BOARD\s+([^\s)]+)\s*\).*/\1/')
          echo "üì¶ Using board: $BOARD"
          west build -d build --pristine 

      - name: Flash to ESP32
        run: |
          if [ -f build/zephyr/zephyr.elf ]; then
            echo "‚úÖ Flashing to ESP32..."
            west flash -d build --runner esptool
          else
            echo "‚ùå zephyr.elf not found!" && exit 1
          fi
