name: Zephyr CI Build and Flash

on:
  push:
    branches: [main]
  workflow_dispatch:
  
jobs:
  build:
    name: 🔧 Build Firmware
    runs-on: ubuntu-latest

    env:
      ZEPHYR_TOOLCHAIN_VARIANT: zephyr
      ZEPHYR_SDK_INSTALL_DIR: /opt/zephyr-sdk

    steps:
      - name: 📦 Checkout Source
        uses: actions/checkout@v4

      - name: 💾 Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ hashFiles('zephyr/scripts/requirements.txt') }}
          restore-keys: |
            pip-

      - name: 💾 Cache APT packages
        uses: actions/cache@v4
        with:
          path: |
            /var/cache/apt/archives
            /var/lib/apt/lists
          key: apt-${{ runner.os }}-v1
          restore-keys: |
            apt-${{ runner.os }}-
       
      - name: 🧰 Install System Dependencies
        run: |
          sudo apt update
          sudo apt install -y --no-install-recommends \
            cmake ninja-build gperf ccache dfu-util \
            device-tree-compiler wget python3-pip python3-setuptools python3-wheel \
            python3-dev python3-ply python3-colorama python3-click \
            python3-yaml python3-pyelftools build-essential unzip


      - name: 💾 Cache Zephyr Modules & West
        uses: actions/cache@v4
        with:
          path: |
            .west
            modules
            zephyr
            tools
          key: west-${{ hashFiles('west.yml') }}
          restore-keys: |
            west-
      - name: ⚙️ Setup West and Python Dependencies
        run: |
          pip3 install west
          if [ ! -d .west ]; then
            echo "🛠️ Initializing west workspace"
            west init 
          fi
          west update
          west zephyr-export
          pip3 install -r zephyr/scripts/requirements.txt

      - name: 📥 Install Zephyr SDK
        run: |
          if [ ! -d /opt/zephyr-sdk ]; then
            echo "⬇️ Downloading Zephyr SDK"
            wget https://github.com/zephyrproject-rtos/sdk-ng/releases/download/v0.16.4/zephyr-sdk-0.16.4_linux-x86_64.tar.xz
            tar -xf zephyr-sdk-0.16.4_linux-x86_64.tar.xz
            sudo mv zephyr-sdk-0.16.4 /opt/zephyr-sdk
            sudo /opt/zephyr-sdk/setup.sh -t all -c
          else
            echo "✅ Zephyr SDK already present"
          fi

      - name: 🛠️ Build Firmware
        run: |
          BOARD=$(grep -E '^set\s*\(\s*BOARD\s+[^\s)]+\s*\)' CMakeLists.txt | sed -E 's/^set\s*\(\s*BOARD\s+([^\s)]+)\s*\).*/\1/')
          echo "📦 Detected BOARD: $BOARD"

          export DTC_OVERLAY_FILE=${{ github.workspace }}/boards/espressif/esp32_common.overlay
          echo "📄 Using overlay: $DTC_OVERLAY_FILE"

          west build -p 

      - name: ☁️ Upload Firmware
        uses: actions/upload-artifact@v4
        with:
          name: zephyr-firmware
          path: build
          retention-days: 2
          compression-level: 0
  flash:
    needs: build
    runs-on: [self-hosted]

    steps:
    - name: ⬇️ Download Firmware Artifact
      uses: actions/download-artifact@v4
      with:
        name: zephyr-firmware
        path : build

    - name: 🔍 Show firmware contents
      run: ls  build

    - name: 🚀 Flash to ESP32
      run: |
        cd build
        if [ -f zephyr/zephyr.elf ]; then
          echo "✅ Flashing zephyr.elf to board..."
          west flash -d . --skip-rebuild
        else
          echo "❌ zephyr.elf not found!" && exit 1
        fi
  




