name: Zephyr CI Build and Flash

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    name: üîß Build Firmware
    runs-on: ubuntu-latest

    env:
      ZEPHYR_TOOLCHAIN_VARIANT: zephyr
      ZEPHYR_SDK_INSTALL_DIR: /opt/zephyr-sdk

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üíæ Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ hashFiles('zephyr/scripts/requirements.txt') }}
          restore-keys: |
            pip-

      - name: üíæ Cache Zephyr Modules
        uses: actions/cache@v4
        with:
          path: |
            .west
            modules
            zephyr
            tools
          key: west-${{ hashFiles('west.yml') }}
          restore-keys: |
            west-

      - name: üß∞ Install System Dependencies
        run: |
          sudo apt update
          sudo apt install -y cmake ninja-build gperf ccache dfu-util \
            device-tree-compiler wget python3-pip python3-setuptools python3-wheel \
            python3-dev python3-ply python3-colorama python3-click \
            python3-yaml python3-pyelftools build-essential unzip

      - name: üõ†Ô∏è Setup West & Python
        run: |
          pip3 install west
          if [ ! -d .west ]; then
            west init
          fi
          west update
          west zephyr-export
          pip3 install -r zephyr/scripts/requirements.txt

      - name: üì• Install Zephyr SDK
        run: |
          wget https://github.com/zephyrproject-rtos/sdk-ng/releases/download/v0.16.4/zephyr-sdk-0.16.4_linux-x86_64.tar.xz
          tar -xf zephyr-sdk-0.16.4_linux-x86_64.tar.xz
          sudo mv zephyr-sdk-0.16.4 /opt/zephyr-sdk
          sudo /opt/zephyr-sdk/setup.sh -t all -c

      - name: üß± Build Firmware
        run: |
          BOARD=$(grep -E '^set\s*\(\s*BOARD\s+[^\s)]+\s*\)' CMakeLists.txt | sed -E 's/^set\s*\(\s*BOARD\s+([^\s)]+)\s*\).*/\1/')
          echo "üì¶ Detected BOARD: $BOARD"
          export DTC_OVERLAY_FILE=${{ github.workspace }}/boards/espressif/esp32_common.overlay
          echo "üìÑ Using overlay: $DTC_OVERLAY_FILE"
          west build -p always

      - name: ‚òÅÔ∏è Upload Firmware Artifact
        uses: actions/upload-artifact@v4
        with:
          name: zephyr-firmware
          path: build/
          retention-days: 2
          compression-level: 0

  flash:
    name: üöÄ Flash to ESP32
    needs: build
    runs-on: [self-hosted]
    
    defaults:
      run:
        working-directory: ${{ github.workspace }} 

    steps:
      - name: ‚¨áÔ∏è Download Firmware Artifact
        uses: actions/download-artifact@v4
        with:
          name: zephyr-firmware
          path: firmware

      - name: üîç Show Downloaded Firmware
        run: |
          ls -R firmware/

      - name: Source Zephyr Env
        run: |
          source /home/hadoop/zephyr/zephyr/zephyr-env.sh
          echo "ZEPHYR_BASE = $ZEPHYR_BASE"

      # - name: üõ†Ô∏è Reconfigure Build Metadata
      #   run: |
      #     cd ${{ github.workspace }}
      #     source /home/hadoop/zephyr/zephyr/zephyr-env.sh
      #     BOARD=$(grep -E '^set\s*\(\s*BOARD\s+[^\s)]+\s*\)' CMakeLists.txt | sed -E 's/^set\s*\(\s*BOARD\s+([^\s)]+)\s*\).*/\1/')
      #     echo "Detected BOARD: $BOARD"
      #     west build -d build  --cmake-only .

      - name: üöÄ Flash to ESP32
        run: |
          cd ${{ github.workspace }}

          source /home/hadoop/zephyr/zephyr/zephyr-env.sh

          if [ ! -f build/zephyr/zephyr.elf ]; then
            echo "‚ùå zephyr.elf not found!" && exit 1
          fi

          PORT=$(ls /dev/ttyUSB* | head -n 1)
          echo "üì° Using serial port: $PORT"

          west flash -d build --skip-rebuild --esptool-path=$(which esptool.py)
