name: Zephyr CI Build

on:
  push:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      ZEPHYR_TOOLCHAIN_VARIANT: zephyr
      ZEPHYR_SDK_INSTALL_DIR: /opt/zephyr-sdk

    steps:
    - name: Checkout Your App
      uses: actions/checkout@v4

    # üîÅ Cache pip dependencies
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: pip-${{ hashFiles('zephyr/scripts/requirements.txt') }}
        restore-keys: |
          pip-

    # üîÅ Cache west + zephyr modules
    - name: Cache West & Zephyr Modules
      uses: actions/cache@v4
      with:
        path: |
          .west
          modules
          zephyr
          tools
        key: west-modules-${{ hashFiles('west.yml') }}
        restore-keys: |
          west-modules-

    # üß∞ Install host system dependencies
    - name: Install System Dependencies
      run: |
        sudo apt update
        sudo apt install -y cmake ninja-build gperf ccache dfu-util \
          device-tree-compiler wget python3-pip python3-setuptools python3-wheel \
          python3-dev python3-ply python3-colorama python3-click \
          python3-yaml python3-pyelftools build-essential

    # üß± Set up West and Python deps
    - name: Setup West Workspace
      run: |
        pip3 install west

        # Only initialize west workspace if not cached
        if [ ! -d .west ]; then
          echo "üõ†Ô∏è Initializing west workspace (local layout)"
          west init
        else
          echo "‚úÖ West workspace restored from cache"
        fi

        west update
        west zephyr-export
        pip3 install -r zephyr/scripts/requirements.txt

    # üì¶ Install Zephyr SDK
    - name: Install Zephyr SDK
      run: |
        wget https://github.com/zephyrproject-rtos/sdk-ng/releases/download/v0.16.4/zephyr-sdk-0.16.4_linux-x86_64.tar.xz
        tar -xf zephyr-sdk-0.16.4_linux-x86_64.tar.xz
        sudo mv zephyr-sdk-0.16.4 /opt/zephyr-sdk
        sudo /opt/zephyr-sdk/setup.sh -t all -c

    # üîß Extract board from CMakeLists.txt and build
    - name: Extract BOARD and Build
      run: |
        BOARD=$(grep -E '^set\s*\(\s*BOARD\s+[^\s)]+\s*\)' CMakeLists.txt | sed -E 's/^set\s*\(\s*BOARD\s+([^\s)]+)\s*\).*/\1/')
        echo "üì¶ Using detected board: $BOARD"

        export DTC_OVERLAY_FILE=${{ github.workspace }}/boards/espressif/esp32_common.overlay
        echo "üìÑ Using overlay: $DTC_OVERLAY_FILE"

        west build  -p

    # ‚¨ÜÔ∏è Upload firmware ELF

    - name: Upload Firmware
      uses: actions/upload-artifact@v4
      with:
        name: zephyr-firmware
        path: build/
        retention-days : 2
        compression-level: 0
        overwrite: true
